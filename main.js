const canvas = document.getElementById("renderCanvas");
const engine = new BABYLON.Engine(canvas, true);
const scene = new BABYLON.Scene(engine);

// --- –§–æ–Ω ---
var skybox = BABYLON.MeshBuilder.CreateBox("cityBox", {size:1000.0}, scene);
var skyboxMaterial = new BABYLON.StandardMaterial("cityBox", scene);
skyboxMaterial.backFaceCulling = false;
skyboxMaterial.reflectionTexture = new BABYLON.CubeTexture("textures/citybox/citybox", scene);
skyboxMaterial.reflectionTexture.coordinatesMode = BABYLON.Texture.SKYBOX_MODE;
skyboxMaterial.diffuseColor = new BABYLON.Color3(0, 0, 0);
skyboxMaterial.specularColor = new BABYLON.Color3(0, 0, 0);
skybox.material = skyboxMaterial;

// --- –ö–∞–º–µ—Ä–∞ "–≤–∏–¥ —Å–≤–µ—Ä—Ö—É" ---
const camera = new BABYLON.ArcRotateCamera(
    "camera",
    0,           // –ü–æ–≤–æ—Ä–æ—Ç –≤–æ–∫—Ä—É–≥ –æ—Å–∏ Y
    1.3,         // –ù–∞–∫–ª–æ–Ω (–æ–∫–æ–ª–æ 1.57 = —Å—Ç—Ä–æ–≥–æ —Å–≤–µ—Ä—Ö—É)
    15,          // –†–∞–¥–∏—É—Å (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞)
    new BABYLON.Vector3(0, 0, 0),
    scene
);
camera.attachControl(canvas, true);
camera.upperBetaLimit = Math.PI / 2.2;

// --- –°–≤–µ—Ç ---
const light = new BABYLON.HemisphericLight("light", new BABYLON.Vector3(1, 1, 0), scene);

// --- –ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å (playground) ---
// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è ground –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ playground
let ground = null;
BABYLON.SceneLoader.ImportMesh("", "models/", "playground.glb", scene, function (newMeshes) {
    if (!newMeshes || newMeshes.length === 0) return;
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å) –∏–ª–∏ –ø–µ—Ä–≤—É—é –º–µ—à—É
    const playground = newMeshes[0].parent || newMeshes[0];
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–∏ playground
    playground.position = new BABYLON.Vector3(0, 0, 0);
    playground.rotationQuaternion = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–≤–æ—Ä–æ—Ç –∏–∑ glTF
    playground.scaling = new BABYLON.Vector3(1, 1, 1);
    
    ground = playground;
});

// --- –¶–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤ ---
const elementPrices = {
    "swing.glb": 5000,
    "lgk_314.glb": 10000,
    "msk_201.glb": 15000,
    "bench.glb": 3000,
    "msk_105.glb": 4000,
    "lgk_11.glb": 6000,
    "lgp_112.glb": 7000,
    "lgd_3.glb": 11000,
};

let totalPrice = 0;

// --- –°–ª–æ–≤–∞—Ä—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–µ–π ---
// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
const modelSizes = {
    "lgk_314.glb": 2,
    "msk_201.glb": 3,
    "msk_105.glb": 3,
    "lgk_11.glb": 1.2,
    "lgp_112.glb": 2.5,
    "lgd_3.glb": 3,
};

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ ---
document.querySelectorAll(".item").forEach(item => {
    item.addEventListener("dragstart", event => {
        const model = event.target.closest(".item").getAttribute("data-model");
        console.log("Drag started:", model);
        event.dataTransfer.setData("model", model);
    });
});

// --- –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è drop ---
canvas.addEventListener("dragover", event => event.preventDefault());

// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è drop –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ ---
canvas.addEventListener("drop", event => {
    event.preventDefault();
    const modelName = event.dataTransfer.getData("model");
    const pickResult = scene.pick(event.clientX, event.clientY);

    if (modelName) {
        BABYLON.SceneLoader.ImportMesh("", "models/", modelName, scene, function (newMeshes) {
            if (!newMeshes || newMeshes.length === 0) {
                console.error("–û—à–∏–±–∫–∞: –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞", modelName);
                return;
            }

            // –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—à–µ–π
            const container = new BABYLON.TransformNode("modelContainer", scene);
            newMeshes.forEach(mesh => {
                mesh.parent = container;
            });

            // –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏
            if (modelName === "bench.glb") {
                container.rotation.x = Math.PI / 2;
            }

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤ –ø–æ–∑–∏—Ü–∏—é –±—Ä–æ—Å–∫–∞ (–µ—Å–ª–∏ pickResult –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –±–µ—Ä–µ–º (0,0,0))
            container.position = pickResult.pickedPoint || new BABYLON.Vector3(0, 0, 0);

            // –í—ã—á–∏—Å–ª—è–µ–º bounding box
            let boundingVectors = container.getHierarchyBoundingVectors();
            let size = boundingVectors.max.subtract(boundingVectors.min);
            let maxDimension = Math.max(size.x, size.y, size.z);

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –º–æ–¥–µ–ª–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
            let standardSize = modelSizes[modelName] || 1;

            // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º —Ç–∞–∫, —á—Ç–æ–±—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å —Å—Ç–∞–ª–∞ —Ä–∞–≤–Ω–∞ standardSize
            let scaleFactor = standardSize / maxDimension;
            container.scaling = new BABYLON.Vector3(scaleFactor, scaleFactor, scaleFactor);

            // –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –Ω–∏–∂–Ω—é—é –≥—Ä–∞–Ω—å –ø–æ Y=0
            boundingVectors = container.getHierarchyBoundingVectors();
            const minY = boundingVectors.min.y;
            container.position.y -= minY;

            // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
            const price = elementPrices[modelName] || 0;
            totalPrice += price;
            document.getElementById("totalPrice").textContent = totalPrice.toLocaleString();

            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ç–∞–±–ª–∏—Ü—É —Å –∫–Ω–æ–ø–∫–æ–π —É–¥–∞–ª–µ–Ω–∏—è
            const tableBody = document.querySelector("#elementsTable tbody");
            const row = document.createElement("tr");
            row.innerHTML = `<td>${modelName}</td>
                             <td>${price.toLocaleString()} ‚ÇΩ</td>
                             <td><button class="delete-button" style="cursor:pointer;">üóëÔ∏è</button></td>`;
            tableBody.appendChild(row);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Å—Ç—Ä–æ–∫–µ
            row.container = container;
            row.price = price;

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
            row.querySelector(".delete-button").addEventListener("click", () => {
                if (row.container) {
                    row.container.dispose();
                }
                totalPrice -= row.price;
                document.getElementById("totalPrice").textContent = totalPrice.toLocaleString();
                row.remove();
            });
        });
    }
});

// --- –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–∫—Ä–æ–º–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ playground) ---
document.getElementById("clearButton").addEventListener("click", () => {
    totalPrice = 0;
    document.getElementById("totalPrice").textContent = "0";
    document.querySelector("#elementsTable tbody").innerHTML = "";

    // –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º playground –∏ –µ–≥–æ –¥–æ—á–µ—Ä–Ω–∏–µ –º–µ—à–∏
    scene.meshes.forEach(mesh => {
        if (ground && (mesh === ground || mesh.isDescendantOf(ground))) {
            // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º playground
        } else {
            mesh.dispose();
        }
    });

    scene.transformNodes.forEach(node => {
        if (node.name === "modelContainer") {
            node.dispose();
        }
    });
});

// --- –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é (–ø—Ä–∞–≤—ã–π –∫–ª–∏–∫) ---
canvas.addEventListener("contextmenu", event => event.preventDefault());

// --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞–Ω–∏–ø—É–ª—è—Ü–∏—è–º–∏ —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ ---
let selectedMesh = null;
let isDragging = false;
let isRotating = false;
let dragOffset = BABYLON.Vector3.Zero();
let initialRotationY = 0;
let initialPointerX = 0;

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –∏ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏
scene.onPointerObservable.add(pointerInfo => {
    const event = pointerInfo.event;
    
    if (pointerInfo.type === BABYLON.PointerEventTypes.POINTERDOWN) {
        const pickInfo = pointerInfo.pickInfo;
        if (pickInfo && pickInfo.hit && pickInfo.pickedMesh) {
            // –ï—Å–ª–∏ –∫–ª–∏–∫ –ø–æ playground –∏–ª–∏ –ø–æ –µ–≥–æ –¥–æ—á–µ—Ä–Ω–∏–º –æ–±—ä–µ–∫—Ç–∞–º ‚Äì –Ω–µ –≤—ã–±–∏—Ä–∞–µ–º –æ–±—ä–µ–∫—Ç
            if (ground && (pickInfo.pickedMesh === ground || pickInfo.pickedMesh.isDescendantOf(ground))) {
                selectedMesh = null;
                return;
            }
            // –í—ã–±–∏—Ä–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ–±—ä–µ–∫—Ç–∞
            selectedMesh = pickInfo.pickedMesh.parent || pickInfo.pickedMesh;
            
            // –û—Ç–∫–ª—é—á–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–º–µ—Ä–æ–π, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞–ª–æ –ø–µ—Ä–µ–º–µ—â–∞—Ç—å/–≤—Ä–∞—â–∞—Ç—å –æ–±—ä–µ–∫—Ç
            camera.detachControl(canvas);

            // –õ–µ–≤—ã–π –∫–ª–∏–∫ ‚Äì –Ω–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ
            if (event.button === 0) {
                isDragging = true;
                dragOffset = selectedMesh.position.subtract(pickInfo.pickedPoint);
            }
            // –ü—Ä–∞–≤—ã–π –∫–ª–∏–∫ ‚Äì –Ω–∞—á–∏–Ω–∞–µ–º –≤—Ä–∞—â–µ–Ω–∏–µ
            else if (event.button === 2) {
                isRotating = true;
                initialRotationY = selectedMesh.rotation.y;
                initialPointerX = event.clientX;
            }
        }
    }
    else if (pointerInfo.type === BABYLON.PointerEventTypes.POINTERMOVE) {
        // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
        if (isDragging && selectedMesh) {
            // –í—ã–±–∏—Ä–∞–µ–º —Ç–æ—á–∫—É –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ playground (—É—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—á–µ—Ä–Ω–∏–µ –æ–±—ä–µ–∫—Ç—ã)
            const pickResult = scene.pick(
                scene.pointerX,
                scene.pointerY,
                mesh => ground && (mesh === ground || mesh.isDescendantOf(ground))
            );
            if (pickResult && pickResult.hit && pickResult.pickedPoint) {
                let newPos = pickResult.pickedPoint.add(dragOffset);
                newPos.y = 0;
                selectedMesh.position = newPos;
                
                // –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏ –æ–±—ä–µ–∫—Ç–∞ –ø–æ Y=0
                let boundingVectors = selectedMesh.getHierarchyBoundingVectors();
                const minY = boundingVectors.min.y;
                selectedMesh.position.y -= minY;
            }
        }
        // –í—Ä–∞—â–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
        else if (isRotating && selectedMesh) {
            const deltaX = event.clientX - initialPointerX;
            selectedMesh.rotation.y = initialRotationY + deltaX * 0.01;
        }
    }
    else if (pointerInfo.type === BABYLON.PointerEventTypes.POINTERUP) {
        // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ/–≤—Ä–∞—â–µ–Ω–∏–µ
        if (isDragging || isRotating) {
            camera.attachControl(canvas, true);
        }
        isDragging = false;
        isRotating = false;
        selectedMesh = null;
    }
});

engine.runRenderLoop(() => scene.render());
window.addEventListener("resize", () => engine.resize());
